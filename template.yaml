AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  Code to deploy aws infrastructure for 2 microservices
  focus in order and payment services

# Global Parameters to easy changes in future
Parameters:
  EventBusName:
    Type: String
    Description: Event bus name
    Default: 'default'

Globals:
  # base configuration for all lambdas
  Function:
    Runtime: go1.x
    Timeout: 5
    Architectures:
      - x86_64

Resources:
  # Configuration for API
  APIGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: 'microservices_API'
      StageName: Dev
      Models:
        Order:
          type: object
          required:
            - user_id
            - item
            - quantity
            - total_price
          properties:
            user_id:
              type: string
            item:
              type: string
            quantity:
              type: integer
            total_price:
              type: number
        Payment:
          type: object
          required:
            - order_id
            - status
          properties:
            order_id:
              Type: string
            status:
              type: string

  # Deploy all the functions
  OrderApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Order_API_Lambda
      CodeUri: services/functions/order_api
      Handler: order_api_lambda
      # Configuration of api method and access to lambda
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId:
              Ref: APIGatewayApi
            Path: /order
            Method: POST
            RequestModel:
              Model: Order
              Required: true
              ValidateBody: true
      # Policy statements for evenBridge use
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBusName
        - DynamoDBCrudPolicy:
            TableName: !Ref OrderTable
      # Environment variables
      Environment:
        Variables:
          EVENT_BUS_NAME: !Ref EventBusName
          TABLE_NAME: !Ref OrderTable

  PaymentApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Payment_API_Lambda
      CodeUri: services/functions/payment_api
      Handler: payment_api_lambda
      # Configuration of api method and access to lambda
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId:
              Ref: APIGatewayApi
            Path: /payment
            Method: POST
            RequestModel:
              Model: Payment
              Required: true
              ValidateBody: true
      # Policy statements for evenBridge use
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBusName
        - DynamoDBCrudPolicy:
            TableName: !Ref PaymentTable
      # Environment variables
      Environment:
        Variables:
          EVENT_BUS_NAME: !Ref EventBusName
          TABLE_NAME: !Ref PaymentTable

  OrderEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Order_Event_Lambda
      CodeUri: services/functions/order_event
      Handler: order_event_lambda
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrderTable
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            RuleName: payment_to_order_rule
            Pattern:
              source:
                - custom.PaymentApiFunction
            RetryPolicy:
              MaximumRetryAttempts: 5
              MaximumEventAgeInSeconds: 120
      # Environment variables
      Environment:
        Variables:
          TABLE_NAME: !Ref OrderTable

  PaymentEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Payment_Event_Lambda
      CodeUri: services/functions/payment_event
      Handler: payment_event_lambda
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PaymentTable
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            RuleName: order_to_payment_rule
            Pattern:
              source:
                - custom.OrderApiFunction
            RetryPolicy:
              MaximumRetryAttempts: 5
              MaximumEventAgeInSeconds: 120
      # Environment variables
      Environment:
        Variables:
          TABLE_NAME: !Ref PaymentTable

  # Simple tables in DynamoDB
  OrderTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: OrderTable
      PrimaryKey:
        Name: OrderID
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  PaymentTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: PaymentTable
      PrimaryKey:
        Name: OrderID
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

Outputs:
  OrderApi:
    Description: 'API Gateway endpoint URL for dev stage for order function'
    Value: !Sub 'https://${APIGatewayApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/Dev/order/'
  paymentApi:
    Description: 'API Gateway endpoint URL for dev stage for payment function'
    Value: !Sub 'https://${APIGatewayApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/Dev/payment/'
